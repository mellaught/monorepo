schema {
  query: Query
  subscription: Subscription
}

"Marks the GraphQL type as indexable entity.  Each type that should be an entity is required to be annotated with this directive."
directive @entity on OBJECT

"Defined a Subgraph ID for an object type"
directive @subgraphId(id: String!) on OBJECT

"creates a virtual field on the entity that may be queried but cannot be set manually through the mappings API."
directive @derivedFrom(field: String!) on FIELD_DEFINITION

type goerli_AggregateRootSavedSlow {
  id: ID!
  aggregateRoot: goerli_Bytes!
  count: BigInt!
  aggregatedRoots: [goerli_Bytes!]
  rootTimestamp: BigInt!
}

input goerli_AggregateRootSavedSlow_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  aggregateRoot: goerli_Bytes
  aggregateRoot_not: goerli_Bytes
  aggregateRoot_gt: goerli_Bytes
  aggregateRoot_lt: goerli_Bytes
  aggregateRoot_gte: goerli_Bytes
  aggregateRoot_lte: goerli_Bytes
  aggregateRoot_in: [goerli_Bytes!]
  aggregateRoot_not_in: [goerli_Bytes!]
  aggregateRoot_contains: goerli_Bytes
  aggregateRoot_not_contains: goerli_Bytes
  count: BigInt
  count_not: BigInt
  count_gt: BigInt
  count_lt: BigInt
  count_gte: BigInt
  count_lte: BigInt
  count_in: [BigInt!]
  count_not_in: [BigInt!]
  aggregatedRoots: [goerli_Bytes!]
  aggregatedRoots_not: [goerli_Bytes!]
  aggregatedRoots_contains: [goerli_Bytes!]
  aggregatedRoots_contains_nocase: [goerli_Bytes!]
  aggregatedRoots_not_contains: [goerli_Bytes!]
  aggregatedRoots_not_contains_nocase: [goerli_Bytes!]
  rootTimestamp: BigInt
  rootTimestamp_not: BigInt
  rootTimestamp_gt: BigInt
  rootTimestamp_lt: BigInt
  rootTimestamp_gte: BigInt
  rootTimestamp_lte: BigInt
  rootTimestamp_in: [BigInt!]
  rootTimestamp_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: goerli_BlockChangedFilter
  and: [goerli_AggregateRootSavedSlow_filter]
  or: [goerli_AggregateRootSavedSlow_filter]
}

enum goerli_AggregateRootSavedSlow_orderBy {
  id
  aggregateRoot
  count
  aggregatedRoots
  rootTimestamp
}

type goerli_AggregatedMessageRoot {
  id: ID!
  index: BigInt!
  receivedRoot: goerli_Bytes!
  domain: BigInt
  blockNumber: BigInt
}

input goerli_AggregatedMessageRoot_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  index: BigInt
  index_not: BigInt
  index_gt: BigInt
  index_lt: BigInt
  index_gte: BigInt
  index_lte: BigInt
  index_in: [BigInt!]
  index_not_in: [BigInt!]
  receivedRoot: goerli_Bytes
  receivedRoot_not: goerli_Bytes
  receivedRoot_gt: goerli_Bytes
  receivedRoot_lt: goerli_Bytes
  receivedRoot_gte: goerli_Bytes
  receivedRoot_lte: goerli_Bytes
  receivedRoot_in: [goerli_Bytes!]
  receivedRoot_not_in: [goerli_Bytes!]
  receivedRoot_contains: goerli_Bytes
  receivedRoot_not_contains: goerli_Bytes
  domain: BigInt
  domain_not: BigInt
  domain_gt: BigInt
  domain_lt: BigInt
  domain_gte: BigInt
  domain_lte: BigInt
  domain_in: [BigInt!]
  domain_not_in: [BigInt!]
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: goerli_BlockChangedFilter
  and: [goerli_AggregatedMessageRoot_filter]
  or: [goerli_AggregatedMessageRoot_filter]
}

enum goerli_AggregatedMessageRoot_orderBy {
  id
  index
  receivedRoot
  domain
  blockNumber
}

enum goerli_Aggregation_interval {
  hour
  day
}

type goerli_ArbitrumConnectorMeta {
  id: ID!
  spokeDomain: BigInt!
  hubDomain: BigInt!
  amb: goerli_Bytes!
  rootManager: goerli_Bytes!
  mirrorConnector: goerli_Bytes!
}

input goerli_ArbitrumConnectorMeta_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  spokeDomain: BigInt
  spokeDomain_not: BigInt
  spokeDomain_gt: BigInt
  spokeDomain_lt: BigInt
  spokeDomain_gte: BigInt
  spokeDomain_lte: BigInt
  spokeDomain_in: [BigInt!]
  spokeDomain_not_in: [BigInt!]
  hubDomain: BigInt
  hubDomain_not: BigInt
  hubDomain_gt: BigInt
  hubDomain_lt: BigInt
  hubDomain_gte: BigInt
  hubDomain_lte: BigInt
  hubDomain_in: [BigInt!]
  hubDomain_not_in: [BigInt!]
  amb: goerli_Bytes
  amb_not: goerli_Bytes
  amb_gt: goerli_Bytes
  amb_lt: goerli_Bytes
  amb_gte: goerli_Bytes
  amb_lte: goerli_Bytes
  amb_in: [goerli_Bytes!]
  amb_not_in: [goerli_Bytes!]
  amb_contains: goerli_Bytes
  amb_not_contains: goerli_Bytes
  rootManager: goerli_Bytes
  rootManager_not: goerli_Bytes
  rootManager_gt: goerli_Bytes
  rootManager_lt: goerli_Bytes
  rootManager_gte: goerli_Bytes
  rootManager_lte: goerli_Bytes
  rootManager_in: [goerli_Bytes!]
  rootManager_not_in: [goerli_Bytes!]
  rootManager_contains: goerli_Bytes
  rootManager_not_contains: goerli_Bytes
  mirrorConnector: goerli_Bytes
  mirrorConnector_not: goerli_Bytes
  mirrorConnector_gt: goerli_Bytes
  mirrorConnector_lt: goerli_Bytes
  mirrorConnector_gte: goerli_Bytes
  mirrorConnector_lte: goerli_Bytes
  mirrorConnector_in: [goerli_Bytes!]
  mirrorConnector_not_in: [goerli_Bytes!]
  mirrorConnector_contains: goerli_Bytes
  mirrorConnector_not_contains: goerli_Bytes
  """Filter for the block changed event."""
  _change_block: goerli_BlockChangedFilter
  and: [goerli_ArbitrumConnectorMeta_filter]
  or: [goerli_ArbitrumConnectorMeta_filter]
}

enum goerli_ArbitrumConnectorMeta_orderBy {
  id
  spokeDomain
  hubDomain
  amb
  rootManager
  mirrorConnector
}

type goerli_BaseConnectorMeta {
  id: ID!
  spokeDomain: BigInt!
  hubDomain: BigInt!
  amb: goerli_Bytes!
  rootManager: goerli_Bytes!
  mirrorConnector: goerli_Bytes!
}

input goerli_BaseConnectorMeta_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  spokeDomain: BigInt
  spokeDomain_not: BigInt
  spokeDomain_gt: BigInt
  spokeDomain_lt: BigInt
  spokeDomain_gte: BigInt
  spokeDomain_lte: BigInt
  spokeDomain_in: [BigInt!]
  spokeDomain_not_in: [BigInt!]
  hubDomain: BigInt
  hubDomain_not: BigInt
  hubDomain_gt: BigInt
  hubDomain_lt: BigInt
  hubDomain_gte: BigInt
  hubDomain_lte: BigInt
  hubDomain_in: [BigInt!]
  hubDomain_not_in: [BigInt!]
  amb: goerli_Bytes
  amb_not: goerli_Bytes
  amb_gt: goerli_Bytes
  amb_lt: goerli_Bytes
  amb_gte: goerli_Bytes
  amb_lte: goerli_Bytes
  amb_in: [goerli_Bytes!]
  amb_not_in: [goerli_Bytes!]
  amb_contains: goerli_Bytes
  amb_not_contains: goerli_Bytes
  rootManager: goerli_Bytes
  rootManager_not: goerli_Bytes
  rootManager_gt: goerli_Bytes
  rootManager_lt: goerli_Bytes
  rootManager_gte: goerli_Bytes
  rootManager_lte: goerli_Bytes
  rootManager_in: [goerli_Bytes!]
  rootManager_not_in: [goerli_Bytes!]
  rootManager_contains: goerli_Bytes
  rootManager_not_contains: goerli_Bytes
  mirrorConnector: goerli_Bytes
  mirrorConnector_not: goerli_Bytes
  mirrorConnector_gt: goerli_Bytes
  mirrorConnector_lt: goerli_Bytes
  mirrorConnector_gte: goerli_Bytes
  mirrorConnector_lte: goerli_Bytes
  mirrorConnector_in: [goerli_Bytes!]
  mirrorConnector_not_in: [goerli_Bytes!]
  mirrorConnector_contains: goerli_Bytes
  mirrorConnector_not_contains: goerli_Bytes
  """Filter for the block changed event."""
  _change_block: goerli_BlockChangedFilter
  and: [goerli_BaseConnectorMeta_filter]
  or: [goerli_BaseConnectorMeta_filter]
}

enum goerli_BaseConnectorMeta_orderBy {
  id
  spokeDomain
  hubDomain
  amb
  rootManager
  mirrorConnector
}

scalar goerli_BigDecimal

scalar BigInt

input goerli_BlockChangedFilter {
  number_gte: Int!
}

input goerli_Block_height {
  hash: goerli_Bytes
  number: Int
  number_gte: Int
}

type goerli_BnbConnectorMeta {
  id: ID!
  spokeDomain: BigInt!
  hubDomain: BigInt!
  amb: goerli_Bytes!
  rootManager: goerli_Bytes!
  mirrorConnector: goerli_Bytes!
}

input goerli_BnbConnectorMeta_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  spokeDomain: BigInt
  spokeDomain_not: BigInt
  spokeDomain_gt: BigInt
  spokeDomain_lt: BigInt
  spokeDomain_gte: BigInt
  spokeDomain_lte: BigInt
  spokeDomain_in: [BigInt!]
  spokeDomain_not_in: [BigInt!]
  hubDomain: BigInt
  hubDomain_not: BigInt
  hubDomain_gt: BigInt
  hubDomain_lt: BigInt
  hubDomain_gte: BigInt
  hubDomain_lte: BigInt
  hubDomain_in: [BigInt!]
  hubDomain_not_in: [BigInt!]
  amb: goerli_Bytes
  amb_not: goerli_Bytes
  amb_gt: goerli_Bytes
  amb_lt: goerli_Bytes
  amb_gte: goerli_Bytes
  amb_lte: goerli_Bytes
  amb_in: [goerli_Bytes!]
  amb_not_in: [goerli_Bytes!]
  amb_contains: goerli_Bytes
  amb_not_contains: goerli_Bytes
  rootManager: goerli_Bytes
  rootManager_not: goerli_Bytes
  rootManager_gt: goerli_Bytes
  rootManager_lt: goerli_Bytes
  rootManager_gte: goerli_Bytes
  rootManager_lte: goerli_Bytes
  rootManager_in: [goerli_Bytes!]
  rootManager_not_in: [goerli_Bytes!]
  rootManager_contains: goerli_Bytes
  rootManager_not_contains: goerli_Bytes
  mirrorConnector: goerli_Bytes
  mirrorConnector_not: goerli_Bytes
  mirrorConnector_gt: goerli_Bytes
  mirrorConnector_lt: goerli_Bytes
  mirrorConnector_gte: goerli_Bytes
  mirrorConnector_lte: goerli_Bytes
  mirrorConnector_in: [goerli_Bytes!]
  mirrorConnector_not_in: [goerli_Bytes!]
  mirrorConnector_contains: goerli_Bytes
  mirrorConnector_not_contains: goerli_Bytes
  """Filter for the block changed event."""
  _change_block: goerli_BlockChangedFilter
  and: [goerli_BnbConnectorMeta_filter]
  or: [goerli_BnbConnectorMeta_filter]
}

enum goerli_BnbConnectorMeta_orderBy {
  id
  spokeDomain
  hubDomain
  amb
  rootManager
  mirrorConnector
}

scalar goerli_Bytes

type goerli_GnosisConnectorMeta {
  id: ID!
  spokeDomain: BigInt!
  hubDomain: BigInt!
  amb: goerli_Bytes!
  rootManager: goerli_Bytes!
  mirrorConnector: goerli_Bytes!
}

input goerli_GnosisConnectorMeta_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  spokeDomain: BigInt
  spokeDomain_not: BigInt
  spokeDomain_gt: BigInt
  spokeDomain_lt: BigInt
  spokeDomain_gte: BigInt
  spokeDomain_lte: BigInt
  spokeDomain_in: [BigInt!]
  spokeDomain_not_in: [BigInt!]
  hubDomain: BigInt
  hubDomain_not: BigInt
  hubDomain_gt: BigInt
  hubDomain_lt: BigInt
  hubDomain_gte: BigInt
  hubDomain_lte: BigInt
  hubDomain_in: [BigInt!]
  hubDomain_not_in: [BigInt!]
  amb: goerli_Bytes
  amb_not: goerli_Bytes
  amb_gt: goerli_Bytes
  amb_lt: goerli_Bytes
  amb_gte: goerli_Bytes
  amb_lte: goerli_Bytes
  amb_in: [goerli_Bytes!]
  amb_not_in: [goerli_Bytes!]
  amb_contains: goerli_Bytes
  amb_not_contains: goerli_Bytes
  rootManager: goerli_Bytes
  rootManager_not: goerli_Bytes
  rootManager_gt: goerli_Bytes
  rootManager_lt: goerli_Bytes
  rootManager_gte: goerli_Bytes
  rootManager_lte: goerli_Bytes
  rootManager_in: [goerli_Bytes!]
  rootManager_not_in: [goerli_Bytes!]
  rootManager_contains: goerli_Bytes
  rootManager_not_contains: goerli_Bytes
  mirrorConnector: goerli_Bytes
  mirrorConnector_not: goerli_Bytes
  mirrorConnector_gt: goerli_Bytes
  mirrorConnector_lt: goerli_Bytes
  mirrorConnector_gte: goerli_Bytes
  mirrorConnector_lte: goerli_Bytes
  mirrorConnector_in: [goerli_Bytes!]
  mirrorConnector_not_in: [goerli_Bytes!]
  mirrorConnector_contains: goerli_Bytes
  mirrorConnector_not_contains: goerli_Bytes
  """Filter for the block changed event."""
  _change_block: goerli_BlockChangedFilter
  and: [goerli_GnosisConnectorMeta_filter]
  or: [goerli_GnosisConnectorMeta_filter]
}

enum goerli_GnosisConnectorMeta_orderBy {
  id
  spokeDomain
  hubDomain
  amb
  rootManager
  mirrorConnector
}

type goerli_HubDomain {
  id: ID!
  domain: BigInt
}

input goerli_HubDomain_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  domain: BigInt
  domain_not: BigInt
  domain_gt: BigInt
  domain_lt: BigInt
  domain_gte: BigInt
  domain_lte: BigInt
  domain_in: [BigInt!]
  domain_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: goerli_BlockChangedFilter
  and: [goerli_HubDomain_filter]
  or: [goerli_HubDomain_filter]
}

enum goerli_HubDomain_orderBy {
  id
  domain
}

type goerli_HubOptimisticRootFinalized {
  id: ID!
  aggregateRoot: goerli_Bytes!
  timestamp: BigInt!
  blockNumber: BigInt
}

input goerli_HubOptimisticRootFinalized_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  aggregateRoot: goerli_Bytes
  aggregateRoot_not: goerli_Bytes
  aggregateRoot_gt: goerli_Bytes
  aggregateRoot_lt: goerli_Bytes
  aggregateRoot_gte: goerli_Bytes
  aggregateRoot_lte: goerli_Bytes
  aggregateRoot_in: [goerli_Bytes!]
  aggregateRoot_not_in: [goerli_Bytes!]
  aggregateRoot_contains: goerli_Bytes
  aggregateRoot_not_contains: goerli_Bytes
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: goerli_BlockChangedFilter
  and: [goerli_HubOptimisticRootFinalized_filter]
  or: [goerli_HubOptimisticRootFinalized_filter]
}

enum goerli_HubOptimisticRootFinalized_orderBy {
  id
  aggregateRoot
  timestamp
  blockNumber
}

"""
8 bytes signed integer

"""
scalar goerli_Int8

type goerli_LineaConnectorMeta {
  id: ID!
  spokeDomain: BigInt!
  hubDomain: BigInt!
  amb: goerli_Bytes!
  rootManager: goerli_Bytes!
  mirrorConnector: goerli_Bytes!
}

input goerli_LineaConnectorMeta_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  spokeDomain: BigInt
  spokeDomain_not: BigInt
  spokeDomain_gt: BigInt
  spokeDomain_lt: BigInt
  spokeDomain_gte: BigInt
  spokeDomain_lte: BigInt
  spokeDomain_in: [BigInt!]
  spokeDomain_not_in: [BigInt!]
  hubDomain: BigInt
  hubDomain_not: BigInt
  hubDomain_gt: BigInt
  hubDomain_lt: BigInt
  hubDomain_gte: BigInt
  hubDomain_lte: BigInt
  hubDomain_in: [BigInt!]
  hubDomain_not_in: [BigInt!]
  amb: goerli_Bytes
  amb_not: goerli_Bytes
  amb_gt: goerli_Bytes
  amb_lt: goerli_Bytes
  amb_gte: goerli_Bytes
  amb_lte: goerli_Bytes
  amb_in: [goerli_Bytes!]
  amb_not_in: [goerli_Bytes!]
  amb_contains: goerli_Bytes
  amb_not_contains: goerli_Bytes
  rootManager: goerli_Bytes
  rootManager_not: goerli_Bytes
  rootManager_gt: goerli_Bytes
  rootManager_lt: goerli_Bytes
  rootManager_gte: goerli_Bytes
  rootManager_lte: goerli_Bytes
  rootManager_in: [goerli_Bytes!]
  rootManager_not_in: [goerli_Bytes!]
  rootManager_contains: goerli_Bytes
  rootManager_not_contains: goerli_Bytes
  mirrorConnector: goerli_Bytes
  mirrorConnector_not: goerli_Bytes
  mirrorConnector_gt: goerli_Bytes
  mirrorConnector_lt: goerli_Bytes
  mirrorConnector_gte: goerli_Bytes
  mirrorConnector_lte: goerli_Bytes
  mirrorConnector_in: [goerli_Bytes!]
  mirrorConnector_not_in: [goerli_Bytes!]
  mirrorConnector_contains: goerli_Bytes
  mirrorConnector_not_contains: goerli_Bytes
  """Filter for the block changed event."""
  _change_block: goerli_BlockChangedFilter
  and: [goerli_LineaConnectorMeta_filter]
  or: [goerli_LineaConnectorMeta_filter]
}

enum goerli_LineaConnectorMeta_orderBy {
  id
  spokeDomain
  hubDomain
  amb
  rootManager
  mirrorConnector
}

type goerli_OptimismConnectorMeta {
  id: ID!
  spokeDomain: BigInt!
  hubDomain: BigInt!
  amb: goerli_Bytes!
  rootManager: goerli_Bytes!
  mirrorConnector: goerli_Bytes!
}

input goerli_OptimismConnectorMeta_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  spokeDomain: BigInt
  spokeDomain_not: BigInt
  spokeDomain_gt: BigInt
  spokeDomain_lt: BigInt
  spokeDomain_gte: BigInt
  spokeDomain_lte: BigInt
  spokeDomain_in: [BigInt!]
  spokeDomain_not_in: [BigInt!]
  hubDomain: BigInt
  hubDomain_not: BigInt
  hubDomain_gt: BigInt
  hubDomain_lt: BigInt
  hubDomain_gte: BigInt
  hubDomain_lte: BigInt
  hubDomain_in: [BigInt!]
  hubDomain_not_in: [BigInt!]
  amb: goerli_Bytes
  amb_not: goerli_Bytes
  amb_gt: goerli_Bytes
  amb_lt: goerli_Bytes
  amb_gte: goerli_Bytes
  amb_lte: goerli_Bytes
  amb_in: [goerli_Bytes!]
  amb_not_in: [goerli_Bytes!]
  amb_contains: goerli_Bytes
  amb_not_contains: goerli_Bytes
  rootManager: goerli_Bytes
  rootManager_not: goerli_Bytes
  rootManager_gt: goerli_Bytes
  rootManager_lt: goerli_Bytes
  rootManager_gte: goerli_Bytes
  rootManager_lte: goerli_Bytes
  rootManager_in: [goerli_Bytes!]
  rootManager_not_in: [goerli_Bytes!]
  rootManager_contains: goerli_Bytes
  rootManager_not_contains: goerli_Bytes
  mirrorConnector: goerli_Bytes
  mirrorConnector_not: goerli_Bytes
  mirrorConnector_gt: goerli_Bytes
  mirrorConnector_lt: goerli_Bytes
  mirrorConnector_gte: goerli_Bytes
  mirrorConnector_lte: goerli_Bytes
  mirrorConnector_in: [goerli_Bytes!]
  mirrorConnector_not_in: [goerli_Bytes!]
  mirrorConnector_contains: goerli_Bytes
  mirrorConnector_not_contains: goerli_Bytes
  """Filter for the block changed event."""
  _change_block: goerli_BlockChangedFilter
  and: [goerli_OptimismConnectorMeta_filter]
  or: [goerli_OptimismConnectorMeta_filter]
}

enum goerli_OptimismConnectorMeta_orderBy {
  id
  spokeDomain
  hubDomain
  amb
  rootManager
  mirrorConnector
}

type goerli_OptimisticRootPropagated {
  id: ID!
  aggregateRoot: goerli_Bytes!
  domainsHash: goerli_Bytes!
  timestamp: BigInt!
  blockNumber: BigInt
}

input goerli_OptimisticRootPropagated_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  aggregateRoot: goerli_Bytes
  aggregateRoot_not: goerli_Bytes
  aggregateRoot_gt: goerli_Bytes
  aggregateRoot_lt: goerli_Bytes
  aggregateRoot_gte: goerli_Bytes
  aggregateRoot_lte: goerli_Bytes
  aggregateRoot_in: [goerli_Bytes!]
  aggregateRoot_not_in: [goerli_Bytes!]
  aggregateRoot_contains: goerli_Bytes
  aggregateRoot_not_contains: goerli_Bytes
  domainsHash: goerli_Bytes
  domainsHash_not: goerli_Bytes
  domainsHash_gt: goerli_Bytes
  domainsHash_lt: goerli_Bytes
  domainsHash_gte: goerli_Bytes
  domainsHash_lte: goerli_Bytes
  domainsHash_in: [goerli_Bytes!]
  domainsHash_not_in: [goerli_Bytes!]
  domainsHash_contains: goerli_Bytes
  domainsHash_not_contains: goerli_Bytes
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: goerli_BlockChangedFilter
  and: [goerli_OptimisticRootPropagated_filter]
  or: [goerli_OptimisticRootPropagated_filter]
}

enum goerli_OptimisticRootPropagated_orderBy {
  id
  aggregateRoot
  domainsHash
  timestamp
  blockNumber
}

type goerli_OptimisticRootProposed {
  id: ID!
  disputeCliff: BigInt!
  aggregateRoot: goerli_Bytes!
  snapshotsRoots: [goerli_Bytes!]
  domains: [BigInt!]
  baseAggregateRoot: goerli_Bytes!
  timestamp: BigInt!
  blockNumber: BigInt
}

input goerli_OptimisticRootProposed_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  disputeCliff: BigInt
  disputeCliff_not: BigInt
  disputeCliff_gt: BigInt
  disputeCliff_lt: BigInt
  disputeCliff_gte: BigInt
  disputeCliff_lte: BigInt
  disputeCliff_in: [BigInt!]
  disputeCliff_not_in: [BigInt!]
  aggregateRoot: goerli_Bytes
  aggregateRoot_not: goerli_Bytes
  aggregateRoot_gt: goerli_Bytes
  aggregateRoot_lt: goerli_Bytes
  aggregateRoot_gte: goerli_Bytes
  aggregateRoot_lte: goerli_Bytes
  aggregateRoot_in: [goerli_Bytes!]
  aggregateRoot_not_in: [goerli_Bytes!]
  aggregateRoot_contains: goerli_Bytes
  aggregateRoot_not_contains: goerli_Bytes
  snapshotsRoots: [goerli_Bytes!]
  snapshotsRoots_not: [goerli_Bytes!]
  snapshotsRoots_contains: [goerli_Bytes!]
  snapshotsRoots_contains_nocase: [goerli_Bytes!]
  snapshotsRoots_not_contains: [goerli_Bytes!]
  snapshotsRoots_not_contains_nocase: [goerli_Bytes!]
  domains: [BigInt!]
  domains_not: [BigInt!]
  domains_contains: [BigInt!]
  domains_contains_nocase: [BigInt!]
  domains_not_contains: [BigInt!]
  domains_not_contains_nocase: [BigInt!]
  baseAggregateRoot: goerli_Bytes
  baseAggregateRoot_not: goerli_Bytes
  baseAggregateRoot_gt: goerli_Bytes
  baseAggregateRoot_lt: goerli_Bytes
  baseAggregateRoot_gte: goerli_Bytes
  baseAggregateRoot_lte: goerli_Bytes
  baseAggregateRoot_in: [goerli_Bytes!]
  baseAggregateRoot_not_in: [goerli_Bytes!]
  baseAggregateRoot_contains: goerli_Bytes
  baseAggregateRoot_not_contains: goerli_Bytes
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: goerli_BlockChangedFilter
  and: [goerli_OptimisticRootProposed_filter]
  or: [goerli_OptimisticRootProposed_filter]
}

enum goerli_OptimisticRootProposed_orderBy {
  id
  disputeCliff
  aggregateRoot
  snapshotsRoots
  domains
  baseAggregateRoot
  timestamp
  blockNumber
}

"""Defines the order direction, either ascending or descending"""
enum goerli_OrderDirection {
  asc
  desc
}

type goerli_PolygonConnectorMeta {
  id: ID!
  spokeDomain: BigInt!
  hubDomain: BigInt!
  amb: goerli_Bytes!
  rootManager: goerli_Bytes!
  mirrorConnector: goerli_Bytes!
}

input goerli_PolygonConnectorMeta_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  spokeDomain: BigInt
  spokeDomain_not: BigInt
  spokeDomain_gt: BigInt
  spokeDomain_lt: BigInt
  spokeDomain_gte: BigInt
  spokeDomain_lte: BigInt
  spokeDomain_in: [BigInt!]
  spokeDomain_not_in: [BigInt!]
  hubDomain: BigInt
  hubDomain_not: BigInt
  hubDomain_gt: BigInt
  hubDomain_lt: BigInt
  hubDomain_gte: BigInt
  hubDomain_lte: BigInt
  hubDomain_in: [BigInt!]
  hubDomain_not_in: [BigInt!]
  amb: goerli_Bytes
  amb_not: goerli_Bytes
  amb_gt: goerli_Bytes
  amb_lt: goerli_Bytes
  amb_gte: goerli_Bytes
  amb_lte: goerli_Bytes
  amb_in: [goerli_Bytes!]
  amb_not_in: [goerli_Bytes!]
  amb_contains: goerli_Bytes
  amb_not_contains: goerli_Bytes
  rootManager: goerli_Bytes
  rootManager_not: goerli_Bytes
  rootManager_gt: goerli_Bytes
  rootManager_lt: goerli_Bytes
  rootManager_gte: goerli_Bytes
  rootManager_lte: goerli_Bytes
  rootManager_in: [goerli_Bytes!]
  rootManager_not_in: [goerli_Bytes!]
  rootManager_contains: goerli_Bytes
  rootManager_not_contains: goerli_Bytes
  mirrorConnector: goerli_Bytes
  mirrorConnector_not: goerli_Bytes
  mirrorConnector_gt: goerli_Bytes
  mirrorConnector_lt: goerli_Bytes
  mirrorConnector_gte: goerli_Bytes
  mirrorConnector_lte: goerli_Bytes
  mirrorConnector_in: [goerli_Bytes!]
  mirrorConnector_not_in: [goerli_Bytes!]
  mirrorConnector_contains: goerli_Bytes
  mirrorConnector_not_contains: goerli_Bytes
  """Filter for the block changed event."""
  _change_block: goerli_BlockChangedFilter
  and: [goerli_PolygonConnectorMeta_filter]
  or: [goerli_PolygonConnectorMeta_filter]
}

enum goerli_PolygonConnectorMeta_orderBy {
  id
  spokeDomain
  hubDomain
  amb
  rootManager
  mirrorConnector
}

type Query {
  goerli_rootAggregated(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: goerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): goerli_RootAggregated
  goerli_rootAggregateds(
    skip: Int = 0
    first: Int = 100
    orderBy: goerli_RootAggregated_orderBy
    orderDirection: goerli_OrderDirection
    where: goerli_RootAggregated_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: goerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [goerli_RootAggregated!]!
  goerli_rootPropagated(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: goerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): goerli_RootPropagated
  goerli_rootPropagateds(
    skip: Int = 0
    first: Int = 100
    orderBy: goerli_RootPropagated_orderBy
    orderDirection: goerli_OrderDirection
    where: goerli_RootPropagated_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: goerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [goerli_RootPropagated!]!
  goerli_aggregatedMessageRoot(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: goerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): goerli_AggregatedMessageRoot
  goerli_aggregatedMessageRoots(
    skip: Int = 0
    first: Int = 100
    orderBy: goerli_AggregatedMessageRoot_orderBy
    orderDirection: goerli_OrderDirection
    where: goerli_AggregatedMessageRoot_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: goerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [goerli_AggregatedMessageRoot!]!
  goerli_rootManagerMeta(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: goerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): goerli_RootManagerMeta
  goerli_rootManagerMetas(
    skip: Int = 0
    first: Int = 100
    orderBy: goerli_RootManagerMeta_orderBy
    orderDirection: goerli_OrderDirection
    where: goerli_RootManagerMeta_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: goerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [goerli_RootManagerMeta!]!
  goerli_rootManagerMode(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: goerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): goerli_RootManagerMode
  goerli_rootManagerModes(
    skip: Int = 0
    first: Int = 100
    orderBy: goerli_RootManagerMode_orderBy
    orderDirection: goerli_OrderDirection
    where: goerli_RootManagerMode_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: goerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [goerli_RootManagerMode!]!
  goerli_optimisticRootProposed(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: goerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): goerli_OptimisticRootProposed
  goerli_optimisticRootProposeds(
    skip: Int = 0
    first: Int = 100
    orderBy: goerli_OptimisticRootProposed_orderBy
    orderDirection: goerli_OrderDirection
    where: goerli_OptimisticRootProposed_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: goerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [goerli_OptimisticRootProposed!]!
  goerli_hubOptimisticRootFinalized(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: goerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): goerli_HubOptimisticRootFinalized
  goerli_hubOptimisticRootFinalizeds(
    skip: Int = 0
    first: Int = 100
    orderBy: goerli_HubOptimisticRootFinalized_orderBy
    orderDirection: goerli_OrderDirection
    where: goerli_HubOptimisticRootFinalized_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: goerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [goerli_HubOptimisticRootFinalized!]!
  goerli_optimisticRootPropagated(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: goerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): goerli_OptimisticRootPropagated
  goerli_optimisticRootPropagateds(
    skip: Int = 0
    first: Int = 100
    orderBy: goerli_OptimisticRootPropagated_orderBy
    orderDirection: goerli_OrderDirection
    where: goerli_OptimisticRootPropagated_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: goerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [goerli_OptimisticRootPropagated!]!
  goerli_polygonConnectorMeta(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: goerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): goerli_PolygonConnectorMeta
  goerli_polygonConnectorMetas(
    skip: Int = 0
    first: Int = 100
    orderBy: goerli_PolygonConnectorMeta_orderBy
    orderDirection: goerli_OrderDirection
    where: goerli_PolygonConnectorMeta_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: goerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [goerli_PolygonConnectorMeta!]!
  goerli_optimismConnectorMeta(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: goerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): goerli_OptimismConnectorMeta
  goerli_optimismConnectorMetas(
    skip: Int = 0
    first: Int = 100
    orderBy: goerli_OptimismConnectorMeta_orderBy
    orderDirection: goerli_OrderDirection
    where: goerli_OptimismConnectorMeta_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: goerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [goerli_OptimismConnectorMeta!]!
  goerli_bnbConnectorMeta(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: goerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): goerli_BnbConnectorMeta
  goerli_bnbConnectorMetas(
    skip: Int = 0
    first: Int = 100
    orderBy: goerli_BnbConnectorMeta_orderBy
    orderDirection: goerli_OrderDirection
    where: goerli_BnbConnectorMeta_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: goerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [goerli_BnbConnectorMeta!]!
  goerli_arbitrumConnectorMeta(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: goerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): goerli_ArbitrumConnectorMeta
  goerli_arbitrumConnectorMetas(
    skip: Int = 0
    first: Int = 100
    orderBy: goerli_ArbitrumConnectorMeta_orderBy
    orderDirection: goerli_OrderDirection
    where: goerli_ArbitrumConnectorMeta_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: goerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [goerli_ArbitrumConnectorMeta!]!
  goerli_gnosisConnectorMeta(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: goerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): goerli_GnosisConnectorMeta
  goerli_gnosisConnectorMetas(
    skip: Int = 0
    first: Int = 100
    orderBy: goerli_GnosisConnectorMeta_orderBy
    orderDirection: goerli_OrderDirection
    where: goerli_GnosisConnectorMeta_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: goerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [goerli_GnosisConnectorMeta!]!
  goerli_zkSyncConnectorMeta(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: goerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): goerli_ZkSyncConnectorMeta
  goerli_zkSyncConnectorMetas(
    skip: Int = 0
    first: Int = 100
    orderBy: goerli_ZkSyncConnectorMeta_orderBy
    orderDirection: goerli_OrderDirection
    where: goerli_ZkSyncConnectorMeta_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: goerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [goerli_ZkSyncConnectorMeta!]!
  goerli_lineaConnectorMeta(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: goerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): goerli_LineaConnectorMeta
  goerli_lineaConnectorMetas(
    skip: Int = 0
    first: Int = 100
    orderBy: goerli_LineaConnectorMeta_orderBy
    orderDirection: goerli_OrderDirection
    where: goerli_LineaConnectorMeta_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: goerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [goerli_LineaConnectorMeta!]!
  goerli_baseConnectorMeta(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: goerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): goerli_BaseConnectorMeta
  goerli_baseConnectorMetas(
    skip: Int = 0
    first: Int = 100
    orderBy: goerli_BaseConnectorMeta_orderBy
    orderDirection: goerli_OrderDirection
    where: goerli_BaseConnectorMeta_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: goerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [goerli_BaseConnectorMeta!]!
  goerli_x1ConnectorMeta(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: goerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): goerli_X1ConnectorMeta
  goerli_x1ConnectorMetas(
    skip: Int = 0
    first: Int = 100
    orderBy: goerli_X1ConnectorMeta_orderBy
    orderDirection: goerli_OrderDirection
    where: goerli_X1ConnectorMeta_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: goerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [goerli_X1ConnectorMeta!]!
  goerli_rootMessageProcessed(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: goerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): goerli_RootMessageProcessed
  goerli_rootMessageProcesseds(
    skip: Int = 0
    first: Int = 100
    orderBy: goerli_RootMessageProcessed_orderBy
    orderDirection: goerli_OrderDirection
    where: goerli_RootMessageProcessed_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: goerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [goerli_RootMessageProcessed!]!
  goerli_aggregateRootSavedSlow(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: goerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): goerli_AggregateRootSavedSlow
  goerli_aggregateRootSavedSlows(
    skip: Int = 0
    first: Int = 100
    orderBy: goerli_AggregateRootSavedSlow_orderBy
    orderDirection: goerli_OrderDirection
    where: goerli_AggregateRootSavedSlow_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: goerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [goerli_AggregateRootSavedSlow!]!
  goerli_hubDomain(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: goerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): goerli_HubDomain
  goerli_hubDomains(
    skip: Int = 0
    first: Int = 100
    orderBy: goerli_HubDomain_orderBy
    orderDirection: goerli_OrderDirection
    where: goerli_HubDomain_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: goerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [goerli_HubDomain!]!
  """Access to subgraph metadata"""
  goerli__meta(block: goerli_Block_height): goerli__Meta_
}

type goerli_RootAggregated {
  id: ID!
  domain: BigInt!
  receivedRoot: goerli_Bytes!
  index: BigInt!
}

input goerli_RootAggregated_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  domain: BigInt
  domain_not: BigInt
  domain_gt: BigInt
  domain_lt: BigInt
  domain_gte: BigInt
  domain_lte: BigInt
  domain_in: [BigInt!]
  domain_not_in: [BigInt!]
  receivedRoot: goerli_Bytes
  receivedRoot_not: goerli_Bytes
  receivedRoot_gt: goerli_Bytes
  receivedRoot_lt: goerli_Bytes
  receivedRoot_gte: goerli_Bytes
  receivedRoot_lte: goerli_Bytes
  receivedRoot_in: [goerli_Bytes!]
  receivedRoot_not_in: [goerli_Bytes!]
  receivedRoot_contains: goerli_Bytes
  receivedRoot_not_contains: goerli_Bytes
  index: BigInt
  index_not: BigInt
  index_gt: BigInt
  index_lt: BigInt
  index_gte: BigInt
  index_lte: BigInt
  index_in: [BigInt!]
  index_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: goerli_BlockChangedFilter
  and: [goerli_RootAggregated_filter]
  or: [goerli_RootAggregated_filter]
}

enum goerli_RootAggregated_orderBy {
  id
  domain
  receivedRoot
  index
}

type goerli_RootManagerMeta {
  id: ID!
  domains: [BigInt!]
  connectors: [goerli_Bytes!]
}

input goerli_RootManagerMeta_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  domains: [BigInt!]
  domains_not: [BigInt!]
  domains_contains: [BigInt!]
  domains_contains_nocase: [BigInt!]
  domains_not_contains: [BigInt!]
  domains_not_contains_nocase: [BigInt!]
  connectors: [goerli_Bytes!]
  connectors_not: [goerli_Bytes!]
  connectors_contains: [goerli_Bytes!]
  connectors_contains_nocase: [goerli_Bytes!]
  connectors_not_contains: [goerli_Bytes!]
  connectors_not_contains_nocase: [goerli_Bytes!]
  """Filter for the block changed event."""
  _change_block: goerli_BlockChangedFilter
  and: [goerli_RootManagerMeta_filter]
  or: [goerli_RootManagerMeta_filter]
}

enum goerli_RootManagerMeta_orderBy {
  id
  domains
  connectors
}

type goerli_RootManagerMode {
  id: ID!
  mode: String!
}

input goerli_RootManagerMode_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  mode: String
  mode_not: String
  mode_gt: String
  mode_lt: String
  mode_gte: String
  mode_lte: String
  mode_in: [String!]
  mode_not_in: [String!]
  mode_contains: String
  mode_contains_nocase: String
  mode_not_contains: String
  mode_not_contains_nocase: String
  mode_starts_with: String
  mode_starts_with_nocase: String
  mode_not_starts_with: String
  mode_not_starts_with_nocase: String
  mode_ends_with: String
  mode_ends_with_nocase: String
  mode_not_ends_with: String
  mode_not_ends_with_nocase: String
  """Filter for the block changed event."""
  _change_block: goerli_BlockChangedFilter
  and: [goerli_RootManagerMode_filter]
  or: [goerli_RootManagerMode_filter]
}

enum goerli_RootManagerMode_orderBy {
  id
  mode
}

type goerli_RootMessageProcessed {
  id: ID!
  spokeDomain: BigInt!
  hubDomain: BigInt!
  root: goerli_Bytes
  caller: goerli_Bytes
  transactionHash: goerli_Bytes
  timestamp: BigInt
  gasPrice: BigInt
  gasLimit: BigInt
  blockNumber: BigInt
}

input goerli_RootMessageProcessed_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  spokeDomain: BigInt
  spokeDomain_not: BigInt
  spokeDomain_gt: BigInt
  spokeDomain_lt: BigInt
  spokeDomain_gte: BigInt
  spokeDomain_lte: BigInt
  spokeDomain_in: [BigInt!]
  spokeDomain_not_in: [BigInt!]
  hubDomain: BigInt
  hubDomain_not: BigInt
  hubDomain_gt: BigInt
  hubDomain_lt: BigInt
  hubDomain_gte: BigInt
  hubDomain_lte: BigInt
  hubDomain_in: [BigInt!]
  hubDomain_not_in: [BigInt!]
  root: goerli_Bytes
  root_not: goerli_Bytes
  root_gt: goerli_Bytes
  root_lt: goerli_Bytes
  root_gte: goerli_Bytes
  root_lte: goerli_Bytes
  root_in: [goerli_Bytes!]
  root_not_in: [goerli_Bytes!]
  root_contains: goerli_Bytes
  root_not_contains: goerli_Bytes
  caller: goerli_Bytes
  caller_not: goerli_Bytes
  caller_gt: goerli_Bytes
  caller_lt: goerli_Bytes
  caller_gte: goerli_Bytes
  caller_lte: goerli_Bytes
  caller_in: [goerli_Bytes!]
  caller_not_in: [goerli_Bytes!]
  caller_contains: goerli_Bytes
  caller_not_contains: goerli_Bytes
  transactionHash: goerli_Bytes
  transactionHash_not: goerli_Bytes
  transactionHash_gt: goerli_Bytes
  transactionHash_lt: goerli_Bytes
  transactionHash_gte: goerli_Bytes
  transactionHash_lte: goerli_Bytes
  transactionHash_in: [goerli_Bytes!]
  transactionHash_not_in: [goerli_Bytes!]
  transactionHash_contains: goerli_Bytes
  transactionHash_not_contains: goerli_Bytes
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  gasPrice: BigInt
  gasPrice_not: BigInt
  gasPrice_gt: BigInt
  gasPrice_lt: BigInt
  gasPrice_gte: BigInt
  gasPrice_lte: BigInt
  gasPrice_in: [BigInt!]
  gasPrice_not_in: [BigInt!]
  gasLimit: BigInt
  gasLimit_not: BigInt
  gasLimit_gt: BigInt
  gasLimit_lt: BigInt
  gasLimit_gte: BigInt
  gasLimit_lte: BigInt
  gasLimit_in: [BigInt!]
  gasLimit_not_in: [BigInt!]
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: goerli_BlockChangedFilter
  and: [goerli_RootMessageProcessed_filter]
  or: [goerli_RootMessageProcessed_filter]
}

enum goerli_RootMessageProcessed_orderBy {
  id
  spokeDomain
  hubDomain
  root
  caller
  transactionHash
  timestamp
  gasPrice
  gasLimit
  blockNumber
}

type goerli_RootPropagated {
  id: ID!
  aggregate: goerli_Bytes!
  domainsHash: goerli_Bytes!
  count: BigInt!
  blockNumber: BigInt
}

input goerli_RootPropagated_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  aggregate: goerli_Bytes
  aggregate_not: goerli_Bytes
  aggregate_gt: goerli_Bytes
  aggregate_lt: goerli_Bytes
  aggregate_gte: goerli_Bytes
  aggregate_lte: goerli_Bytes
  aggregate_in: [goerli_Bytes!]
  aggregate_not_in: [goerli_Bytes!]
  aggregate_contains: goerli_Bytes
  aggregate_not_contains: goerli_Bytes
  domainsHash: goerli_Bytes
  domainsHash_not: goerli_Bytes
  domainsHash_gt: goerli_Bytes
  domainsHash_lt: goerli_Bytes
  domainsHash_gte: goerli_Bytes
  domainsHash_lte: goerli_Bytes
  domainsHash_in: [goerli_Bytes!]
  domainsHash_not_in: [goerli_Bytes!]
  domainsHash_contains: goerli_Bytes
  domainsHash_not_contains: goerli_Bytes
  count: BigInt
  count_not: BigInt
  count_gt: BigInt
  count_lt: BigInt
  count_gte: BigInt
  count_lte: BigInt
  count_in: [BigInt!]
  count_not_in: [BigInt!]
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: goerli_BlockChangedFilter
  and: [goerli_RootPropagated_filter]
  or: [goerli_RootPropagated_filter]
}

enum goerli_RootPropagated_orderBy {
  id
  aggregate
  domainsHash
  count
  blockNumber
}

type Subscription {
  goerli_rootAggregated(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: goerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): goerli_RootAggregated
  goerli_rootAggregateds(
    skip: Int = 0
    first: Int = 100
    orderBy: goerli_RootAggregated_orderBy
    orderDirection: goerli_OrderDirection
    where: goerli_RootAggregated_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: goerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [goerli_RootAggregated!]!
  goerli_rootPropagated(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: goerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): goerli_RootPropagated
  goerli_rootPropagateds(
    skip: Int = 0
    first: Int = 100
    orderBy: goerli_RootPropagated_orderBy
    orderDirection: goerli_OrderDirection
    where: goerli_RootPropagated_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: goerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [goerli_RootPropagated!]!
  goerli_aggregatedMessageRoot(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: goerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): goerli_AggregatedMessageRoot
  goerli_aggregatedMessageRoots(
    skip: Int = 0
    first: Int = 100
    orderBy: goerli_AggregatedMessageRoot_orderBy
    orderDirection: goerli_OrderDirection
    where: goerli_AggregatedMessageRoot_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: goerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [goerli_AggregatedMessageRoot!]!
  goerli_rootManagerMeta(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: goerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): goerli_RootManagerMeta
  goerli_rootManagerMetas(
    skip: Int = 0
    first: Int = 100
    orderBy: goerli_RootManagerMeta_orderBy
    orderDirection: goerli_OrderDirection
    where: goerli_RootManagerMeta_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: goerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [goerli_RootManagerMeta!]!
  goerli_rootManagerMode(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: goerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): goerli_RootManagerMode
  goerli_rootManagerModes(
    skip: Int = 0
    first: Int = 100
    orderBy: goerli_RootManagerMode_orderBy
    orderDirection: goerli_OrderDirection
    where: goerli_RootManagerMode_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: goerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [goerli_RootManagerMode!]!
  goerli_optimisticRootProposed(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: goerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): goerli_OptimisticRootProposed
  goerli_optimisticRootProposeds(
    skip: Int = 0
    first: Int = 100
    orderBy: goerli_OptimisticRootProposed_orderBy
    orderDirection: goerli_OrderDirection
    where: goerli_OptimisticRootProposed_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: goerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [goerli_OptimisticRootProposed!]!
  goerli_hubOptimisticRootFinalized(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: goerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): goerli_HubOptimisticRootFinalized
  goerli_hubOptimisticRootFinalizeds(
    skip: Int = 0
    first: Int = 100
    orderBy: goerli_HubOptimisticRootFinalized_orderBy
    orderDirection: goerli_OrderDirection
    where: goerli_HubOptimisticRootFinalized_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: goerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [goerli_HubOptimisticRootFinalized!]!
  goerli_optimisticRootPropagated(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: goerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): goerli_OptimisticRootPropagated
  goerli_optimisticRootPropagateds(
    skip: Int = 0
    first: Int = 100
    orderBy: goerli_OptimisticRootPropagated_orderBy
    orderDirection: goerli_OrderDirection
    where: goerli_OptimisticRootPropagated_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: goerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [goerli_OptimisticRootPropagated!]!
  goerli_polygonConnectorMeta(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: goerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): goerli_PolygonConnectorMeta
  goerli_polygonConnectorMetas(
    skip: Int = 0
    first: Int = 100
    orderBy: goerli_PolygonConnectorMeta_orderBy
    orderDirection: goerli_OrderDirection
    where: goerli_PolygonConnectorMeta_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: goerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [goerli_PolygonConnectorMeta!]!
  goerli_optimismConnectorMeta(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: goerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): goerli_OptimismConnectorMeta
  goerli_optimismConnectorMetas(
    skip: Int = 0
    first: Int = 100
    orderBy: goerli_OptimismConnectorMeta_orderBy
    orderDirection: goerli_OrderDirection
    where: goerli_OptimismConnectorMeta_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: goerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [goerli_OptimismConnectorMeta!]!
  goerli_bnbConnectorMeta(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: goerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): goerli_BnbConnectorMeta
  goerli_bnbConnectorMetas(
    skip: Int = 0
    first: Int = 100
    orderBy: goerli_BnbConnectorMeta_orderBy
    orderDirection: goerli_OrderDirection
    where: goerli_BnbConnectorMeta_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: goerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [goerli_BnbConnectorMeta!]!
  goerli_arbitrumConnectorMeta(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: goerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): goerli_ArbitrumConnectorMeta
  goerli_arbitrumConnectorMetas(
    skip: Int = 0
    first: Int = 100
    orderBy: goerli_ArbitrumConnectorMeta_orderBy
    orderDirection: goerli_OrderDirection
    where: goerli_ArbitrumConnectorMeta_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: goerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [goerli_ArbitrumConnectorMeta!]!
  goerli_gnosisConnectorMeta(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: goerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): goerli_GnosisConnectorMeta
  goerli_gnosisConnectorMetas(
    skip: Int = 0
    first: Int = 100
    orderBy: goerli_GnosisConnectorMeta_orderBy
    orderDirection: goerli_OrderDirection
    where: goerli_GnosisConnectorMeta_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: goerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [goerli_GnosisConnectorMeta!]!
  goerli_zkSyncConnectorMeta(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: goerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): goerli_ZkSyncConnectorMeta
  goerli_zkSyncConnectorMetas(
    skip: Int = 0
    first: Int = 100
    orderBy: goerli_ZkSyncConnectorMeta_orderBy
    orderDirection: goerli_OrderDirection
    where: goerli_ZkSyncConnectorMeta_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: goerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [goerli_ZkSyncConnectorMeta!]!
  goerli_lineaConnectorMeta(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: goerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): goerli_LineaConnectorMeta
  goerli_lineaConnectorMetas(
    skip: Int = 0
    first: Int = 100
    orderBy: goerli_LineaConnectorMeta_orderBy
    orderDirection: goerli_OrderDirection
    where: goerli_LineaConnectorMeta_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: goerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [goerli_LineaConnectorMeta!]!
  goerli_baseConnectorMeta(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: goerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): goerli_BaseConnectorMeta
  goerli_baseConnectorMetas(
    skip: Int = 0
    first: Int = 100
    orderBy: goerli_BaseConnectorMeta_orderBy
    orderDirection: goerli_OrderDirection
    where: goerli_BaseConnectorMeta_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: goerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [goerli_BaseConnectorMeta!]!
  goerli_x1ConnectorMeta(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: goerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): goerli_X1ConnectorMeta
  goerli_x1ConnectorMetas(
    skip: Int = 0
    first: Int = 100
    orderBy: goerli_X1ConnectorMeta_orderBy
    orderDirection: goerli_OrderDirection
    where: goerli_X1ConnectorMeta_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: goerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [goerli_X1ConnectorMeta!]!
  goerli_rootMessageProcessed(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: goerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): goerli_RootMessageProcessed
  goerli_rootMessageProcesseds(
    skip: Int = 0
    first: Int = 100
    orderBy: goerli_RootMessageProcessed_orderBy
    orderDirection: goerli_OrderDirection
    where: goerli_RootMessageProcessed_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: goerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [goerli_RootMessageProcessed!]!
  goerli_aggregateRootSavedSlow(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: goerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): goerli_AggregateRootSavedSlow
  goerli_aggregateRootSavedSlows(
    skip: Int = 0
    first: Int = 100
    orderBy: goerli_AggregateRootSavedSlow_orderBy
    orderDirection: goerli_OrderDirection
    where: goerli_AggregateRootSavedSlow_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: goerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [goerli_AggregateRootSavedSlow!]!
  goerli_hubDomain(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: goerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): goerli_HubDomain
  goerli_hubDomains(
    skip: Int = 0
    first: Int = 100
    orderBy: goerli_HubDomain_orderBy
    orderDirection: goerli_OrderDirection
    where: goerli_HubDomain_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: goerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [goerli_HubDomain!]!
  """Access to subgraph metadata"""
  goerli__meta(block: goerli_Block_height): goerli__Meta_
}

type goerli_X1ConnectorMeta {
  id: ID!
  spokeDomain: BigInt!
  hubDomain: BigInt!
  amb: goerli_Bytes!
  rootManager: goerli_Bytes!
  mirrorConnector: goerli_Bytes!
}

input goerli_X1ConnectorMeta_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  spokeDomain: BigInt
  spokeDomain_not: BigInt
  spokeDomain_gt: BigInt
  spokeDomain_lt: BigInt
  spokeDomain_gte: BigInt
  spokeDomain_lte: BigInt
  spokeDomain_in: [BigInt!]
  spokeDomain_not_in: [BigInt!]
  hubDomain: BigInt
  hubDomain_not: BigInt
  hubDomain_gt: BigInt
  hubDomain_lt: BigInt
  hubDomain_gte: BigInt
  hubDomain_lte: BigInt
  hubDomain_in: [BigInt!]
  hubDomain_not_in: [BigInt!]
  amb: goerli_Bytes
  amb_not: goerli_Bytes
  amb_gt: goerli_Bytes
  amb_lt: goerli_Bytes
  amb_gte: goerli_Bytes
  amb_lte: goerli_Bytes
  amb_in: [goerli_Bytes!]
  amb_not_in: [goerli_Bytes!]
  amb_contains: goerli_Bytes
  amb_not_contains: goerli_Bytes
  rootManager: goerli_Bytes
  rootManager_not: goerli_Bytes
  rootManager_gt: goerli_Bytes
  rootManager_lt: goerli_Bytes
  rootManager_gte: goerli_Bytes
  rootManager_lte: goerli_Bytes
  rootManager_in: [goerli_Bytes!]
  rootManager_not_in: [goerli_Bytes!]
  rootManager_contains: goerli_Bytes
  rootManager_not_contains: goerli_Bytes
  mirrorConnector: goerli_Bytes
  mirrorConnector_not: goerli_Bytes
  mirrorConnector_gt: goerli_Bytes
  mirrorConnector_lt: goerli_Bytes
  mirrorConnector_gte: goerli_Bytes
  mirrorConnector_lte: goerli_Bytes
  mirrorConnector_in: [goerli_Bytes!]
  mirrorConnector_not_in: [goerli_Bytes!]
  mirrorConnector_contains: goerli_Bytes
  mirrorConnector_not_contains: goerli_Bytes
  """Filter for the block changed event."""
  _change_block: goerli_BlockChangedFilter
  and: [goerli_X1ConnectorMeta_filter]
  or: [goerli_X1ConnectorMeta_filter]
}

enum goerli_X1ConnectorMeta_orderBy {
  id
  spokeDomain
  hubDomain
  amb
  rootManager
  mirrorConnector
}

type goerli_ZkSyncConnectorMeta {
  id: ID!
  spokeDomain: BigInt!
  hubDomain: BigInt!
  amb: goerli_Bytes!
  rootManager: goerli_Bytes!
  mirrorConnector: goerli_Bytes!
}

input goerli_ZkSyncConnectorMeta_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  spokeDomain: BigInt
  spokeDomain_not: BigInt
  spokeDomain_gt: BigInt
  spokeDomain_lt: BigInt
  spokeDomain_gte: BigInt
  spokeDomain_lte: BigInt
  spokeDomain_in: [BigInt!]
  spokeDomain_not_in: [BigInt!]
  hubDomain: BigInt
  hubDomain_not: BigInt
  hubDomain_gt: BigInt
  hubDomain_lt: BigInt
  hubDomain_gte: BigInt
  hubDomain_lte: BigInt
  hubDomain_in: [BigInt!]
  hubDomain_not_in: [BigInt!]
  amb: goerli_Bytes
  amb_not: goerli_Bytes
  amb_gt: goerli_Bytes
  amb_lt: goerli_Bytes
  amb_gte: goerli_Bytes
  amb_lte: goerli_Bytes
  amb_in: [goerli_Bytes!]
  amb_not_in: [goerli_Bytes!]
  amb_contains: goerli_Bytes
  amb_not_contains: goerli_Bytes
  rootManager: goerli_Bytes
  rootManager_not: goerli_Bytes
  rootManager_gt: goerli_Bytes
  rootManager_lt: goerli_Bytes
  rootManager_gte: goerli_Bytes
  rootManager_lte: goerli_Bytes
  rootManager_in: [goerli_Bytes!]
  rootManager_not_in: [goerli_Bytes!]
  rootManager_contains: goerli_Bytes
  rootManager_not_contains: goerli_Bytes
  mirrorConnector: goerli_Bytes
  mirrorConnector_not: goerli_Bytes
  mirrorConnector_gt: goerli_Bytes
  mirrorConnector_lt: goerli_Bytes
  mirrorConnector_gte: goerli_Bytes
  mirrorConnector_lte: goerli_Bytes
  mirrorConnector_in: [goerli_Bytes!]
  mirrorConnector_not_in: [goerli_Bytes!]
  mirrorConnector_contains: goerli_Bytes
  mirrorConnector_not_contains: goerli_Bytes
  """Filter for the block changed event."""
  _change_block: goerli_BlockChangedFilter
  and: [goerli_ZkSyncConnectorMeta_filter]
  or: [goerli_ZkSyncConnectorMeta_filter]
}

enum goerli_ZkSyncConnectorMeta_orderBy {
  id
  spokeDomain
  hubDomain
  amb
  rootManager
  mirrorConnector
}

type goerli__Block_ {
  """The hash of the block"""
  hash: goerli_Bytes
  """The block number"""
  number: Int!
  """Integer representation of the timestamp stored in blocks for the chain"""
  timestamp: Int
}

"""The type for the top-level _meta field"""
type goerli__Meta_ {
  """
  Information about a specific subgraph block. The hash of the block
  will be null if the _meta field has a block constraint that asks for
  a block number. It will be filled if the _meta field has no block constraint
  and therefore asks for the latest  block
  
  """
  block: goerli__Block_!
  """The deployment ID"""
  deployment: String!
  """If `true`, the subgraph encountered indexing errors at some past block"""
  hasIndexingErrors: Boolean!
}

enum _SubgraphErrorPolicy_ {
  """Data will be returned even if the subgraph has indexing errors"""
  allow
  """
  If the subgraph has indexing errors, data will be omitted. The default.
  """
  deny
}